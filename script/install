#!/usr/bin/env bash

set -e
echo ''

DOTFILES_ROOT="${HOME}/.dotfiles"
DOTFILES_HOME=$(pwd)/home
DOTFILES_REPO="git@github.com:brousalis/dotfiles.git"

if [[ ! -d ${DOTFILES_ROOT} ]]; then
  git clone ${DOTFILES_REPO} ${DOTFILES_ROOT}
fi

cd ${DOTFILES_ROOT}

# rbenv
[ ! -d "$HOME/.rbenv" ] && git clone https://github.com/sstephenson/rbenv.git ~/.rbenv

# ruby build
[ ! -d "$HOME/.rbenv/plugins/ruby-build" ] && git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build

# nvm
[ ! -d "$HOME/.nvm" ] && curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash

# zsh
[ ! -d "$HOME/.oh-my-zsh" ] && curl -L http://install.ohmyz.sh | sh

# install vundle
git submodule update --init --recursive

# symlink files
info () {
  printf "  [ \033[00;34m..\033[0m ] $1\n"
}
user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}
success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

link_file () {
  local src=$1 dst=$2
  local overwrite=true backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then
      local currentSrc="$(readlink $dst)"
      if [ "$currentSrc" == "$src" ]
      then
        skip=true;
      else
        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action
        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info "Installing dotfiles"

  for src in $(find "$DOTFILES_HOME"/* -type f -name '*')
  do
    dst="$HOME/.$(basename "${src}")"
    link_file "$src" "$dst"
  done
}

install_vim () {
  info "Installing vim plugins"
  ln -sf "$DOTFILES_ROOT/vim" "$HOME/.vim"
}

install_dotfiles
echo ''
install_vim

echo ''
echo '  All installed!'

# more vim plugins
vim +PluginInstall +qa

# make sure to switch shell to zsh
if [ $SHELL != '/bin/zsh' ]; then
	chsh -s /bin/zsh
fi
